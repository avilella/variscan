/*..........................................................................*//*                                                                          *//*      L a s t W a v e   M a c i n t o s h   2 . 0                         *//*                                                                          *//*      (C) 1998 Copyright Emmanuel Bacry, All Right Reserved.              *//*      Author Emmanuel Bacry                                               *//*                                                                          *//*..........................................................................*/#ifndef MACTEXTWINDOW_H#define MACTEXTWINDOW_H/* * State of a text window  */typedef enum State {	OFF = 0,	IDLE,	PRINTFING} TWSTATE;/* * Type of text window */typedef enum TWType {	TEXTFILE = 0,	TERMINAL} TWTYPE;/* * Buffer of a text window  */typedef struct TextWindowBuffer {	char  *startPos,	    /* pointer to a block of memory which will serve as the buffer */		  *curPos,	        /* pointer to insertion point in the buffer */		  *endPos;	        /* pointer to end of text in the buffer */	long  textHandlePos;	/* current offset in TEHandle (0 if at end, -1 if empty) */	short size;             /* Size of the buffer */} *TEXTWINDOWBUFFER;/* * Default size of the buffers */#define bufferSizeDefault 512/* * Routines on text window buffers */extern TEXTWINDOWBUFFER XXNewTextWindowBuffer(short size);extern void XXDeleteTextWindowBuffer(TEXTWINDOWBUFFER);/* * The text window structure  */typedef struct TextWindow {    CWindowRecord	window;				/*	The window itself */    TEHandle		textEdit;			/*	TextEdit Handle */    ControlHandle 	vScrollbar;		    /*	Vertical scrollbar */	short			linesInWindow;		/*	Number of lines in the window */    short		    selStart;			/*	?? The starting point for a read (can't read before this) ... */    TWSTATE	        state;				/*	The state of the window : PRINTFING or IDLE */    TEXTWINDOWBUFFER      buffer;       /* The output buffer */    short fontId,fontSize,fontType;     /* The attributes of the window */    short nColumns,nRows;    TWTYPE  type;                       /* Type of the window */    Boolean dirty;     Boolean scrollbarDirty;} *TEXTWINDOW;/* * Some global variables and some basic functions */extern  void XXInitTextWindows(void);extern TEXTWINDOW XXTerminalWindow;/* * Some Functions on text windows  */extern void TWRefresh(TEXTWINDOW);extern TEXTWINDOW NewTextWindow(int nRows,int nCols, char *title, TWTYPE);extern void DeleteTextWindow(TEXTWINDOW);extern void TWDoContentClick(TEXTWINDOW theWin, EventRecord *theEvent);extern void TWUpdateScrollbar(TEXTWINDOW window);extern void TWResizeWindow(TEXTWINDOW window,int w, int h);extern void TWGrowWindow(TEXTWINDOW theWin , Point thePoint);extern TEXTWINDOW IsTextWindow(WindowPtr win);extern Boolean IsInEditRange(short first, TEHandle te);extern void TWSetQuit(void);extern char TWQuit(void);extern void DeleteAllTextWindows(void);Boolean HandleTWUpdateActivateEvent(TEXTWINDOW window, EventRecord *theEvent);#define nRowsDefault 30#define nColsDefault 100#endif